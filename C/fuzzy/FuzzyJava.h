/** \file
 *  This C header file was generated by $ANTLR version 3.1b1 - Jimi Was Here
 *
 *     -  From the grammar source file : .\\FuzzyJava.g3l
 *     -                            On : 2008-02-21 12:24:06
 *     -                 for the lexer : FuzzyJavaLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer FuzzyJava has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pFuzzyJava, which is returned from a call to FuzzyJavaNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pFuzzyJava are  as follows:
 *
 *  - void      pFuzzyJava->IMPORT(pFuzzyJava)
 *  - void      pFuzzyJava->RETURN(pFuzzyJava)
 *  - void      pFuzzyJava->CLASS(pFuzzyJava)
 *  - void      pFuzzyJava->METHOD(pFuzzyJava)
 *  - void      pFuzzyJava->FIELD(pFuzzyJava)
 *  - void      pFuzzyJava->STAT(pFuzzyJava)
 *  - void      pFuzzyJava->CALL(pFuzzyJava)
 *  - void      pFuzzyJava->COMMENT(pFuzzyJava)
 *  - void      pFuzzyJava->SL_COMMENT(pFuzzyJava)
 *  - void      pFuzzyJava->STRING(pFuzzyJava)
 *  - void      pFuzzyJava->CHAR(pFuzzyJava)
 *  - void      pFuzzyJava->WS(pFuzzyJava)
 *  - void      pFuzzyJava->QID(pFuzzyJava)
 *  - void      pFuzzyJava->QIDStar(pFuzzyJava)
 *  - void      pFuzzyJava->TYPE(pFuzzyJava)
 *  - void      pFuzzyJava->ARG(pFuzzyJava)
 *  - void      pFuzzyJava->ID(pFuzzyJava)
 *  - void      pFuzzyJava->ESC(pFuzzyJava)
 *  - void      pFuzzyJava->Tokens(pFuzzyJava)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_FuzzyJava_H
#define _FuzzyJava_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct FuzzyJava_Ctx_struct FuzzyJava, * pFuzzyJava;



#define	ANTLR3_INLINE_INPUT_ASCII


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite variables declared but not needed
//          Unreferenced local variable            - lexer rule declares but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */


/** Context tracking structure for FuzzyJava
 */
typedef struct FuzzyJava_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mIMPORT)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mRETURN)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mCLASS)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mMETHOD)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mFIELD)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mSTAT)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mCALL)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mSTRING)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mCHAR)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mWS)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mQID)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mQIDStar)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mTYPE)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mARG)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mID)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mESC)	(struct FuzzyJava_Ctx_struct * ctx);
     void (*mTokens)	(struct FuzzyJava_Ctx_struct * ctx);








    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct FuzzyJava_Ctx_struct * ctx);
        
}
    FuzzyJava, * pFuzzyJava;

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pFuzzyJava FuzzyJavaNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pFuzzyJava FuzzyJavaNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);
pANTLR3_UINT8   FuzzyJavaTokenNames[];

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define STAT      15
#define CLASS      10
#define ESC      19
#define CHAR      21
#define ID      8
#define EOF      -1
#define QID      9
#define TYPE      11
#define IMPORT      6
#define WS      4
#define ARG      12
#define QIDStar      5
#define SL_COMMENT      18
#define RETURN      7
#define FIELD      14
#define CALL      16
#define COMMENT      17
#define METHOD      13
#define STRING      20
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for FuzzyJava
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra line feed to satisfy UNIX systems */
